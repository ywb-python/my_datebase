1.操作数据之前的准备
1.登录数据库
连接mysql
mysql -h 服务器主机地址 -u用户名 -p密码
2.创建用户
use mysql;
insert into user(Host,User,Password) values('服务器主机地址','用户名',
password('密码'))
或
create user '用户名'@'IP地址' identified by '密码'
3.用户权限授权
Grant 权限 on 数据库.* to '用户名'@'IP地址' identified by '密码';
权限=All privilages \ select.update.delete
flush privilages;
4.修改账号和密码
修改账号
use mysql;
update user set user='新值' where user='旧值'
或
rename user '用户名' @ 'IP地址' to '新用户名' @ 'IP地址'
修改密码
update user set password=password('新密码') where user='账号名'
或
set password for 用户名@localhost=password('新密码')(该命令只能在当前账号下使用
)
忘记密码
1.找到mysql安装目录下的my.ini文件
2.在[mysqld]下添加skip-grant-tables,保存退出
3.在cmd窗口输入'net stop mysql'和'net start mysql'重启mysql
4.连接mysql进入命令行，进行修改密码的操作
5.在cmd窗口输入'exit'退出mysql
6.将刚添加的skip-grant-tables删除或者屏蔽，保存退出
7.重启mysql
5.开启远程访问
1.在mysql数据库user表中添加账号，设置它的host为%
create user '用户名' @ '%' identified by '密码'
2.给该账号分配权限
Grant 权限 on 数据库.* to '用户名'@'IP地址' identified by '密码';
权限=All privilages \ select.update.delete
3.刷新权限表
flush privilages;
2.命令行操作数据库
创建数据库 create database [if not exist] 数据库名;
删除数据库 drop database [if exist] 数据库名;
查看数据库 show databases;
使用数据库 use 数据库名;
数据值和字段类型
字段类型
数值类型(int、float、double、decimal)
字符串类型(char、varchar、text)
日期和时间类型(date、time、datetime)
null值(null的算术运算仍然为null,null和0意味着假,1意味着真),不同于0和空字符串
创建数据表
create table [if not exist] `表名`(
`字段名1` 列类型 [属性] [索引] [注释]，
`字段名2` 列类型 [属性] [索引] [注释]，
......
`字段名n` 列类型 [属性] [索引] [注释]，
) [表类型] [表字符集] [注释];
注:这里表名和字段名都需要用反引号引起来，而不是单引号或者双引号
反引号是为了区分mysql保留字和普通字符而引入的
eg:
create table `user3`(
`id` int not null auto_increment,
`name` varchar(100) comment '姓名',
`email` varchar(100),
primary key(`id`)
)engine=MYISAM default charset=utf8 comment='测试表';
 
数据字段属性
unsigned:无符号的，该列不允许为负数
zerofill:位数不足的用0来填充。如int(3,5)，则为005
not ull表示不能为空，该列必须有值
default:默认值。创建列表时可以创建默认值，插入数据时如果未主动设置，则添加默认值
auto_increment:自增。如果某列设置为自增列，插入数据时无需设置此列，默认将自增(
表中只能有一个自增列)。对于自增列，必须是索引且可以设置步长和起始值(set
@@auto_increment=2)。通常用于设置主键
primary key:主键，一种特殊的唯一索引，不允许有空值。如果主键使用单列，则它的值
必须唯一。如果使用多列，则其组合必须唯一
数据表的类型
MYISAM、InnoDB、HEAP、BOB、CSV等
MYISAM与InnoDB比较表
名称	MYISAM	InnoDB
事务处理	不支持	支持
数据行锁定	不支持	支持
外键约束	不支持	支持
全文索引	支持	不支持
表空间大小	较小	较大

特点	节约空间，速度快	安全性高，多用于事务处理及用户操作数据表
 
数据表的存储位置
mysql数据表以文件形式存放在磁盘中
位置:mysql安装目录\data目录下存放数据表。目录名对应数据库名，该目录下文件名对应
数据表名
主要包括表文件、数据文件以及数据库的选项文件
InnoDB类型的数据表只有.frm文件和上一级目录的ibdatal文件
MYISAM类型的数据表有.frm文件(表结构定义文件)、.MYD文件(数据文件)、.MYI文件(索引
文件)
设置数据表字符集
可给数据库、数据表、数据列设置不同的字符集
设定方法:
1.创建表格时设定
2.修改mysql安装目录下的my.ini文件中的character-set-server = utf8
数据表操作
查看数据表结构 desc 表名;
修改表名 alter table 旧表名 rename as 新表名
添加字段 alter table add 字段名 列类型[属性]
修改字段
alter table 表名 modify 字段名 列类型[属性] [primary key] [auto_increment]
或
alter table 表名 change 旧字段名 新字段名 列类型[属性] [primary key]
[auto_increment]
删除字段 alter table 表名 drop 字段名
数据操作
添加数据
insert into 表名[(字段1，字段2，字段3...)] values(值1，值2，值3...)[,(值1，值2
，值3...)]
注:字段省略时，添加的值必须与表结构数据列顺序一致，数量对等
eg:insert into course(cname,tid) values('语文',1),('数学',2),('英语',3);
修改数据
update 表名 set 字段1=值1[,字段2=值1,...] [where condition];
不指定条件则修改该列所有数据
where运算符
逻辑运算符
=、!=、<>(不等于，和!=含义相同)、>、>=、<、<=、between A and B(>=A且<=B)、and或&&、or或||、not或!、XOR或^(逻辑异或，不同为真，相同为假)
比较运算符
is null、is not null、like、in
删除数据
delete from 表名 [where condition];
注:不指定条件则删除该表所有数据
或
truncate [TABLE] 表名
truncate和delete比较
名称	truncate	delete
相同点	删除数据，不删除表结构	删除数据，不删除表结构
不同点	速度快，不影响事务，重新设置AUTO_INCREMENT计数器	速度慢，影响事务，不会重设AUTO_INCREMENT计数器
 
当你不再需要该表时，用drop
当你需要保留该表又要删除表中所有数据时，用truncate
当你需要保留该表又要删除表中部分数据时，用delete
数据表没有外键约束时，truncate等价于不带条件的delete,性能上优于后者
对于有外键的关系表，删除数据只能用delete进行删除(truncate不记录在日志中不能激活
触发器)
数据查询
select [all | distinct] {* | table.* | [table.field1 [as alias1][,table.field2
[as alias2],...]]} from  表1 [as 表别名] [left|inner|out join on 表2]
[where ...] [group by ...] [having ...] [order by ...] [limit {[offset,]
row_count OFFSET offset}]
以上语句中，[]代表可选的，{}代表必须的
查询字段
查询表中所有字段，采用*(效率低，不推荐)
查询表中指定列
多表查询时有同名字段需要指定该字段属于哪个表
eg:select studentId , classId,student.name,name from student,class;
as子句作别名
as子句的作用:
可以给字段取一个新别名
可以给数据表取一个新别名
可以给经计算或总结的结果取一个新别名
as子句中，as 可以省略不写
distinct关键字
作用:去掉select查询返回的记录结果中重复的记录(所有返回列的值都相同)，只返回一条
语法:select distinct 字段1，字段2... from 表名
all关键字是默认的，返回所有记录
数据库中的表达式
表达式一般由文本值、列值、null、函数和操作符组成
表达式一般应用在如下场景:
select语句查询结果中使用
select语句的order by、having等子句使用
where 条件中使用表达式
eg:SELECT  courseName“课程名称”, classHour+10  AS “新学时”  FROM course;
#给返回结果中的课时都加10个课时
自身连接查询：使用表的别名实现与其自身连接的查询
eg:假设在成绩表中有id、学生姓名、课程名称、成绩等字段。现在查询语文成绩>数学成绩
select student_name from score as a,score as b where a.id=b.id and a.grade>
b.grade and a.course_name='语文' and b.course_name='数学'
子查询
在查询语句的where条件子句中，又嵌套了另一个查询语句
mysql的统计函数
count()、avg()、sum()、max()、min()
备份与恢复
数据库备份方法
数据库管理工具,SQLyog
直接拷贝数据库文件和配置文件
mysqldump备份工具
mysqldump客户端
作用:
转储数据库
搜集数据库进行备份
将数据库转移到另一个SQL服务器(不一定是mysql服务器)
语法:mysqldump -h 主机名 -u 用户名 -p [options] 数据库名 [table1,table2,table3]
 >path/filename.sql
mysql数据库的恢复
1.source /path/db_name.sql
path是一个绝对路径，且必须是mysql用户有读写权限的文件
该命令在mysql命令行里执行
2.mysql客户端
mysql -u root -p dbname <db_name.sql
数据库索引
索引分类
主键索引(primary key)
某一个属性组能够唯一标识一条记录
特点:
最常见的索引类型
确保数据记录的唯一性
确定特定数据记录在数据库中的位置
唯一索引(unique)
避免同一个表中某数据列的值重复
与主键索引的区别:主键索引只能有一个
eg:
create table `Grade` (`GradeID` int(11) auto_increment primary key,
`GradeName` varchar(32) not null unique
	#或 unique key `GradeID` (`GradeID`)
)
常规索引(index)
快速定位特定数据
index和key关键字都可以设置常规索引
应加在查找条件的字段
索引不能太多
eg:
create table `result` (
	 //省略一些代码
	index/key `ind` (`studentNo`,`subjectNo`)
)
或
alter table `result` add index `ind` (`studentNo`,`subjectNo`);
全文索引(fulltext)
快速定位特定数据
只能用于MyISAM数据库的char、varchar、text等字段
eg:
create table `student` (
	 #省略一些SQL语句
	fulltext (`name`)
)ENGINE=MYISAM;
或
ALTER TABLE  student ADD FULLTEXT (`name`);
索引维护
创建索引
创建表时添加
建表后追加
alter table 表名 add 索引类型(数据列名)
删除索引
drop index 索引名 on 表名
alter table 表名 drop index 索引名
alter table 表名 drop primary key
查看索引
show index(或keys) from 表名
索引准则
索引不是越多越好
不要动对经常变动的数据加索引
索引一般应加在查找条件的字段
使用性能工具查找最佳索引
索引的顺序从左到右依次扫描
分析sql语句的执行性能
explain 表名(desc 表名)
explain select语句 \G
连接类型从好到差的顺序为const>eq_reg>ref>range>index>all
